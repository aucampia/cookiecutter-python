#!/usr/bin/env bash

# The main intent of this script is to force GitHub Actions to run for
# Renovate PRs even though they were created by GitHub Actions itself.
# For more information on why this is needed, see
# [this](https://github.com/peter-evans/create-pull-request/blob/1310d7dab503600742045e6fd4b84dda64352858/docs/concepts-guidelines.md#triggering-further-workflow-runs).
# This script forces GitHub actions to run for PRs by recreating the
# last commit with a new date and then force pushing it using a deploy
# key with write access.

set -Eeuo pipefail

REPOS_DIR="/tmp/renovate/touch-repos/"
mkdir -vp "${REPOS_DIR}"

echo "Pushed branches:" >&2
# This file is populated by the `bin/renovate/githooks/pre-push` script.
cat /tmp/renovate/branches.ndjson >&2

# For some reason pre-push also runs for the default branch (i.e.
# `master`), so the content of `branches.ndjson` has to be filtered so
# that only branches that Renovate considers as it's own are extracted.
#
# This is done by comparing the branches in the `branches.ndjson` file
# with the branches in the `report.json` file, which is generated by
# Renovate.
#
# The `jq` script below creates an intersection of the unique branches
# in `branches.ndjson` and the unique branches in `report.json`, the end
# result is then a unique list of branches that Renovate has changed and
# that we want to "touch".
jq \
    -c --slurpfile branches /tmp/renovate/branches.ndjson \
    '
    (.repositories | to_entries | map(.key as $repository | .value.branches[] | [$repository, .branchName]) | unique)
        as $report_branches |
    ([$branches.[] | [.repository, .branch]] | unique)
        as $_branches |
    (($_branches - ($_branches - $report_branches)) | [.[] | {"repository": .[0], "branch": .[1]}]) |
    .[]' \
    /tmp/renovate/report.json >/tmp/renovate/branches-unique.ndjson

echo "Touching these branches:" >&2
cat /tmp/renovate/branches-unique.ndjson >&2

errors=false

while IFS= read -r line; do
    echo "Processing branch: ${line}" >&2
    REPOSITORY="$(jq -er '.repository' <<<"${line}")"
    BRANCH="$(jq -er '.branch' <<<"${line}")"
    declare -p REPOSITORY BRANCH >&2

    REPO_DIR="${REPOS_DIR}/${REPOSITORY}"
    rm -r "${REPO_DIR}" || true
    mkdir -vp "${REPO_DIR}"

    git clone --depth 2 --single-branch --branch "${BRANCH}" "git@github.com:${REPOSITORY}.git" "${REPO_DIR}" || {
        echo "ERROR: Failed to clone branch ${BRANCH} of repository ${REPOSITORY}" >&2
        echo "This likely indicates that there was some problem with pushing the branch" >&2
        errors=true
        continue
    }

    # The last commit is amended with a new date because anything more
    # drastic makes Renovate think that someone else has modified the
    # branch, and if Renovate does think someone else has modified the
    # branch, it will essentially ignore it.
    git -C "${REPO_DIR}" commit --amend --no-edit --date="now"
    git -C "${REPO_DIR}" push --force --no-verify origin "${BRANCH}"

    # echo "Auto-approving PR for branch: ${BRANCH}" >&2
    # (cd "${REPO_DIR}" && gh pr review --approve --body "Auto-approved by workflow." "${BRANCH}")

done < <(sort <"/tmp/renovate/branches-unique.ndjson" | uniq)

if [ "${errors}" = true ]; then
    exit 1
fi
