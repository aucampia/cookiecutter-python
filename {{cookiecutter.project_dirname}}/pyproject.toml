# https://python-poetry.org/docs/pyproject/
# https://www.python.org/dev/peps/pep-0621/
[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = ""
authors = []
license = "{{ cookiecutter.sdpx_license_identifier }}"
readme = "README.md"
packages = [
    {include = "*", from = "src"},
]

[tool.poetry.scripts]
"{{ cookiecutter.cli_name }}" = "{{ cookiecutter.python_package_fqname }}.cli:main"

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"
pydantic = "^2.11.7"
PyYAML = "^6.0.2"
# {% if cookiecutter.variant in ["basic", "everything", "minimal_typer"] %}
typer = "^0.16.0"
# {% endif %}
# {% if cookiecutter.variant in ["basic", "everything"] %}
structlog = "^25.4.0"
# {% endif %}

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
codespell = "^2.4.1"
mypy = "^1.16.1"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-asyncio = "^1.0.0"
types-PyYAML = "^6.0.12.20250516"
pip-audit = "^2.9.0"
ruff = "^0.12.0"
typing-extensions = "^4.14.0"
# {% if cookiecutter.build_tool == "poe" %}
poethepoet = "^0.35.0"
# {% endif %}

[tool.codespell]
ignore-words = ".codespellignore"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

target-version = "py39"
[tool.ruff.lint]
# https://beta.ruff.rs/docs/configuration/
preview = true
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # Pyflakes
    "I", # isort
    "N", # pep8-naming
    "RUF", # Ruff
    "UP", # pyupgrade
    "FA", # flake8-future-annotations
]

ignore = [
    "E501", # line too long:
    # Disabled based on black recommendations
    # https://black.readthedocs.io/en/stable/faq.html#why-are-flake8-s-e203-and-w503-violated
    "E203", # whitespace before ':'
    "E231", # missing whitespace after ','
    "E251", # Unexpected spaces around keyword / parameter equals
    # Disabled because this targets Python 3.9 or later
    "UP007", # Use `X | Y` for type annotations
    "UP045", # Use `X | None` for type annotations
]

[tool.ruff.lint.per-file-ignores]

[tool.ruff.format]

[tool.coverage.report]
# https://coverage.readthedocs.io/en/coverage-5.0/config.html
show_missing = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/stable/customize.html
# https://docs.pytest.org/en/stable/reference.html#configuration-options
testpaths = ["tests"]
addopts = ["--cov-config=pyproject.toml", "--cov=src"]
log_format = "%(asctime)s %(process)d %(thread)d %(levelno)03d:%(levelname)-8s %(name)-12s %(module)s:%(lineno)s:%(funcName)s %(message)s"
log_date_format = "%Y-%m-%dT%H:%M:%S"
log_cli_format = "%(asctime)s %(process)d %(thread)d %(levelno)03d:%(levelname)-8s %(name)-12s %(module)s:%(lineno)s:%(funcName)s %(message)s"
log_cli_date_format = "%Y-%m-%dT%H:%M:%S"
asyncio_mode = "auto"

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
files = "src,tests"
mypy_path = "src"
python_version = "{{ cookiecutter.python_version }}"
strict = true
warn_unreachable = true
warn_unused_configs = true
explicit_package_bases = true
namespace_packages = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# {% if cookiecutter.build_tool == "poe" %}
[tool.poe.env]
PYTHON_SOURCE="src tests"

[tool.poe.tasks.validate-static]
help = "perform static validation"
sequence = [
    { cmd = "mypy --show-error-context --show-error-codes ${PYTHON_SOURCE}" },
    { cmd = "black --check --diff ${PYTHON_SOURCE}" },
    { cmd = "ruff check --config pyproject.toml ${PYTHON_SOURCE}" },
    # { shell = "poetry export --without-hashes --with dev --format requirements.txt | poetry run pip-audit --requirement /dev/stdin --no-deps --strict --desc on" },
]

[tool.poe.tasks.test]
help = "run tests"
sequence = [
    { cmd = "pytest" },
]

[tool.poe.tasks.validate-fix]
help = "fix auto fixable validation errors"
sequence = [
    { cmd = "ruff check --config pyproject.toml --fix ${PYTHON_SOURCE}" },
    { cmd = "black ${PYTHON_SOURCE}" },
]


[tool.poe.tasks.validate]
help = "validate everything"
sequence = [
    { ref = "validate-static" },
    { ref = "test" },
]

[tool.poe.tasks.fix-and-validate]
help = "fix things then validate"
sequence = [
    { ref = "validate-fix" },
    { ref = "validate" },
]
# {% endif %}

# {% if cookiecutter.use_poetry_dynamic_versioning == "y" %}
# {% raw %}
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base=base, stage=stage, revision=revision) }}
    {%- else -%}
        {{ serialize_pep440(base=bump_version(base), stage=stage, revision=revision, dev=distance, metadata=[commit, "dirty"] if dirty else None ) | replace(".dev", "a") }}
    {%- endif -%}
"""
[tool.poetry-dynamic-versioning.substitution]
files=["src/**/_version.py"]
# {% endraw %}
# {% endif %}

[build-system]
# {% if cookiecutter.use_poetry_dynamic_versioning == "y" %}
requires = ["setuptools","poetry-core>=1.0.0","poetry-dynamic-versioning"]
# {% else %}{% if 1 == 0 %}
# {% else %}{{ "\n" }}{% endif %}requires = ["setuptools","poetry-core>=1.0.0"]
# {% endif %}
build-backend = "poetry.core.masonry.api"
