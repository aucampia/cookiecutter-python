# https://taskfile.dev/usage/
# https://pkg.go.dev/text/template
# https://go-task.github.io/slim-sprig/
version: "3"
env:
  RENOVATE_CACHE_ARCHIVE: '{{.RENOVATE_CACHE_ARCHIVE | default "/tmp/renovate-cache.tar.gz"}}'
  RENOVATE_REPORT_FILE: '{{.RENOVATE_REPORT_FILE | default "/tmp/renovate-report.json"}}'
vars:
  PYTHON: python3
  POETRY: "poetry"
  RUN_PREFIX: "{{.POETRY}} run"
  RUN_PYTHON: "{{.RUN_PREFIX}} python"
  PY_SOURCE: "hooks tests link_project/pkg_files"
tasks:
  configure:
    desc: Configure this project
    cmds:
      - "{{.POETRY}} install {{.CLI_ARGS}}"
  update:
    desc: Update dependencies
    cmds:
      - "{{.POETRY}} update {{.CLI_ARGS}}"
  update:ranges:
    desc: Update dependency ranges
    cmds:
      - "{{.POETRY}} up {{.CLI_ARGS}}"
  black:
    desc: Run black
    cmds:
      - '{{.RUN_PYTHON}} -m black {{if (ne (.CHECK | default "false") "false")}}--check --diff {{end}}{{.CLI_ARGS | default .PY_SOURCE}}'
  yamlfmt:
    desc: Run yamlfmt
    cmds:
      - yamlfmt {{if (ne (.CHECK | default "false") "false")}}-lint{{end}} {{.CLI_ARGS | default "."}}
  ruff:format:
    desc: Run ruff formatter
    cmds:
      - '{{.RUN_PREFIX}} ruff format --config pyproject.toml {{if (ne (.CHECK | default "false") "false")}}--check --diff {{end}}{{.CLI_ARGS | default .PY_SOURCE}}'
  ruff:lint:
    desc: Run ruff linter
    cmds:
      - '{{.RUN_PREFIX}} ruff check --config pyproject.toml {{if (mustFromJson (.FIX | default "false"))}}--fix {{end}}{{.CLI_ARGS | default .PY_SOURCE}}'
  mypy:
    desc: Run mypy
    cmds:
      - "{{.RUN_PYTHON}} -m mypy --show-error-context --show-error-codes {{.CLI_ARGS}}"
  codespell:
    desc: Run codespell
    cmds:
      - "{{.RUN_PREFIX}} codespell {{.CLI_ARGS | default .PY_SOURCE}}"
  pip-audit:
    desc: Run pip audit
    cmds:
      - |
        {{.POETRY}} export --without-hashes --with dev --format requirements.txt | \
          {{.RUN_PYTHON}} -m pip_audit --requirement /dev/stdin --no-deps --strict --desc on
  test:
    desc: Run tests
    cmds:
      - "{{.RUN_PYTHON}} -m pytest {{.CLI_ARGS}}"
  validate:static:
    desc: Perform static validation
    cmds:
      - task: mypy
      - task: codespell
      - task: ruff:format
        vars: {CHECK: "true"}
      - task: ruff:lint
      - task: yamlfmt
        vars: {CHECK: "true"}
        # - task: pip-audit
  validate:fix:
    desc: Fix auto-fixable validation errors.
    cmds:
      - task: ruff:lint
        vars: {FIX: "true"}
      - task: ruff:format
      - task: yamlfmt
  validate:
    desc: Perform all validation
    cmds:
      - task: validate:static
      - task: test
  fix-and-validate:
    desc: Perform all validation
    cmds:
      - task: validate:fix
      - task: validate
  poetry:clean:
    desc: Clean poetry
    cmds:
      - "{{.POETRY}} env remove --all"
  clean:
    desc: Clean everything
    cmds:
      - task: _rimraf
        vars: {RIMRAF_TARGET: ".mypy_cache"}
      - task: _rimraf
        vars: {RIMRAF_TARGET: ".pytest_cache"}
      - task: _rimraf
        vars: {RIMRAF_TARGET: ".venv"}
      - task: poetry:clean
  default:
    desc: Run validate
    cmds:
      - task: validate
  poetry:
    desc: Run poetry
    cmds:
      - "{{.POETRY}} {{.CLI_ARGS}}"
  venv:run:
    desc: Run args in the venv
    cmds:
      - "{{.RUN_PREFIX}} {{.CLI_ARGS}}"
  venv:python:
    desc: Run python in the venv
    cmds:
      - "{{.RUN_PYTHON}} {{.CLI_ARGS}}"
  example:generate:
    desc: Generate an example
    preconditions:
      - sh: |
          [ -n {{.EXAMPLE_NAME | default "" | shellQuote}} ]
        msg: "EXAMPLE_NAME is required"
    cmds:
      - task: _rimraf
        vars: {RIMRAF_TARGET: "examples/example.project.{{.EXAMPLE_NAME}}"}
      - "{{.RUN_PYTHON}} -m cookiecutter ./ -o examples --no-input --config-file tests/data/cookie-config/{{.EXAMPLE_NAME}}.yaml"
  example:run:
    desc: Run an example
    preconditions:
      - sh: |
          [ -n {{.EXAMPLE_NAME | default "" | shellQuote}} ]
        msg: "EXAMPLE_NAME is required"
    cmds:
      - "(cd examples/example.project.{{.EXAMPLE_NAME}} && {{.POETRY}} install --sync)"
      - "(cd examples/example.project.{{.EXAMPLE_NAME}} && {{.POETRY}} run task validate:fix validate)"
      - "(cd examples/example.project.{{.EXAMPLE_NAME}} && {{.POETRY}} run example.project.{{.EXAMPLE_NAME}}-cli --help)"
      - "(cd examples/example.project.{{.EXAMPLE_NAME}} && {{.POETRY}} run example.project.{{.EXAMPLE_NAME}}-cli sub leaf --help)"
  examples:generate:
    desc: Generate all examples
    cmds:
      - for: ['basic', 'defaults', 'minimal', 'minimal_typer']
        task: example:generate
        vars: {EXAMPLE_NAME: "{{.ITEM}}"}
  examples:run:
    desc: Run all examples
    cmds:
      - for: ['basic', 'defaults', 'minimal', 'minimal_typer']
        task: example:run
        vars: {EXAMPLE_NAME: "{{.ITEM}}"}
  examples:clean:
    desc: Clean examples
    cmds:
      - task: _rimraf
        vars: {RIMRAF_TARGET: "examples"}
  _rimraf:
    # This task is a utility task for recursively removing directories, it is
    # similar to rm -rf but not identical and it should work wherever there is
    # a python interpreter. The name is inspired by
    # <https://www.npmjs.com/package/rimraf>.
    - cmd: |
        {{.PYTHON}} -c '
        from pathlib import Path;
        import sys, shutil;
        for path in sys.argv[1:]:
          if Path(path).exists():
            sys.stderr.write(f"removing {path}\n")
            shutil.rmtree(path, ignore_errors=True)
        ' {{.RIMRAF_TARGET}}

  renovate:rotate-keypair:
    cmds:
      - |
        set -euo pipefail
        PRIVATE_KEY="$(openssl genrsa 4096)"
        PUBLIC_KEY="$(ssh-keygen -y -f /dev/stdin <<< "${PRIVATE_KEY}")"

        gh secret set RENOVATE_GIT_SSH_PRIVATE_KEY <<< "${PRIVATE_KEY}"

        gh repo deploy-key list --json 'title,id' |
          jq -r '.[] | select(.title == "renovate") | .id' |
          xargs --no-run-if-empty -n1 -t gh repo deploy-key delete

        gh repo deploy-key add --allow-write --title 'renovate' /dev/stdin <<< "${PUBLIC_KEY}"

  renovate:dry-run:
    cmds:
      - |
        RENOVATE_TOKEN="$(gh auth token)" RENOVATE_DRY_RUN=full RENOVATE_LOG_LEVEL=debug \
        task renovate 2>&1 |
        tee renovate-output.log

  renovate:
    desc: Run renovate
    cmds:
      - task: renovate:cache:import
      - docker compose run --quiet-build --quiet-pull -T --rm renovate
      - task: renovate:cache:export

  renovate:sx:run:
    desc: Extract renovate secrets
    cmds:
      - |
        set -euo pipefail
        GITHUB_REPOSITORY="$(gh repo view --json owner,name -q '.owner.login + "/" + .name')"
        gh workflow run renovate-sx.yml --field lifetime=300 --ref main
        RUN_ID=""
        while [ -z "${RUN_ID}" ]; do
          sleep 4
          RUN_ID="$(gh run list --workflow renovate-sx.yml --branch main --status=in_progress --json 'number,databaseId' --jq '[sort_by(.number) | reverse][0][0].databaseId')"
          echo "RUN_ID=${RUN_ID@Q}" >&2
        done
        \rm -v /var/tmp/renovate-sx.asc || true
        while ! [ -e "/var/tmp/renovate-sx.asc" ]; do
          echo "Waiting for download to complete..."
          sleep 2
          (cd /var/tmp; gh run --repo "${GITHUB_REPOSITORY}" download "$RUN_ID" -n renovate-sx)
        done
        source <(gpg --decrypt -i /var/tmp/renovate-sx.asc | tee /dev/stderr)
        export RENOVATE_GIT_SSH_PRIVATE_KEY
        export RENOVATE_TOKEN
        {{.CLI_ARGS}}
        echo "Canceling Renovate run ${RUN_ID}..." >&2
        gh run cancel --repo "${GITHUB_REPOSITORY}" "${RUN_ID}" || true
        rm -v /var/tmp/renovate-sx.asc || true

  renovate:report:export:
    desc: Export the Renovate report
    cmds:
      - |
        set -euo pipefail
        mkdir -p "$(dirname -- "${RENOVATE_REPORT_FILE}")"
        docker compose run --entrypoint="" --quiet-build --quiet-pull -T --rm renovate cat /tmp/renovate/report.json > "${RENOVATE_REPORT_FILE}"
        echo "Renovate report exported successfully to ${RENOVATE_REPORT_FILE}" >&2


  renovate:cache:export:
    desc: Export the Renovate cache
    cmds:
      - |
        set -euo pipefail
        mkdir -p "$(dirname -- "${RENOVATE_CACHE_ARCHIVE}")"
        docker compose run --entrypoint="" --quiet-build --quiet-pull -T --rm renovate bash -c '
          set -Eeuo pipefail
          mkdir -p /tmp/renovate/cache >&2
          exec tar -czf - -C /tmp/renovate/cache .
        ' > "${RENOVATE_CACHE_ARCHIVE}.tmp"
        mv -v "${RENOVATE_CACHE_ARCHIVE}.tmp" "${RENOVATE_CACHE_ARCHIVE}"
        echo "Renovate cache exported successfully to ${RENOVATE_CACHE_ARCHIVE}." >&2

  renovate:cache:import:
    desc: Import the Renovate cache
    cmds:
      - |
        set -euo pipefail
        if [ ! -e "${RENOVATE_CACHE_ARCHIVE}" ] ; then
          echo "No cache found." >&2
        else
          echo "Restoring cache from ${RENOVATE_CACHE_ARCHIVE}" >&2
          if cat "${RENOVATE_CACHE_ARCHIVE}" | docker compose run --entrypoint="" --quiet-build --quiet-pull -T --rm renovate bash -c '
            set -Eeuo pipefail </dev/null
            rm -rf /tmp/renovate/cache </dev/null
            mkdir -p /tmp/renovate/cache </dev/null
            exec tar -xzf - -C /tmp/renovate/cache .
          '
          then
            echo "Renovate cache imported successfully from ${RENOVATE_CACHE_ARCHIVE}." >&2
          else
            echo "Failed to import Renovate cache from ${RENOVATE_CACHE_ARCHIVE}." >&2
          fi
          rm -r "${RENOVATE_CACHE_ARCHIVE}"
        fi


  devtools:go:install:
    cmds:
      - |
        set -euo pipefail
        awk -F '"' '/_.*toolchain/{print $2}' devtools/tools.go | GOBIN="${HOME}/bin" xargs -t -I{} go install -C devtools {}
  devtools:go:update:
    cmds:
      - |
        set -euo pipefail
        go get -C devtools/ -u .
        go mod tidy -C devtools/
  ghcr:init:
    env:
      DOCKERFILE: |
        FROM scratch
        LABEL description="Empty Docker image"
    cmds:
      - |
        GITHUB_REPOSITORY="$(gh repo view --json owner,name -q '.owner.login + "/" + .name')"
        echo "${DOCKERFILE}" | docker build -t ghcr.io/${GITHUB_REPOSITORY}:empty -f - .
        docker push ghcr.io/${GITHUB_REPOSITORY}:empty


  ssh-debug:rotate-keypair:
    desc: Rotate the SSH keypair
    cmds:
      - |
        set -x -euo pipefail

        GITHUB_REPOSITORY="$(gh repo view --json owner,name -q '.owner.login + "/" + .name')"
        DESCRIPTION="${GITHUB_REPOSITORY}/ssh-debug"
        ngrok api ssh-credentials list |
          jq -r '.ssh_credentials[] | select(.description == "'"${DESCRIPTION}"'") | .id' |
          xargs --no-run-if-empty -n1 -t ngrok api ssh-credentials delete

        PRIVATE_KEY="$(openssl genrsa 4096)"
        PUBLIC_KEY="$(ssh-keygen -y -f /dev/stdin <<< "${PRIVATE_KEY}")"

        gh secret set NGROK_SSH_PRIVATE_KEY <<< "${PRIVATE_KEY}"

        ngrok api ssh-credentials create --description "${DESCRIPTION}" --public-key "${PUBLIC_KEY}"
